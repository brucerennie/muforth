( This file is part of muforth: https://muforth.dev/

  Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading STM32 flash programming code (sector flash)

( Stack macros.)

( NOTE: We have switched stacks! ARM won't let us push the LR onto any
  stack but the system data stack, pointed to by SP. Stupid.

  R stack uses SP, push, and pop. Stack pointer reg is rsp == SP.
  D stack uses RP, str, and ldm.  Stack pointer reg is dsp == RP.)

( NOTE: The registers are pushed and popped in "register index" order:
  lower indices end up at lower addresses. The order that they are
  mentioned in the macro call is irrelevant! So be careful.)

assembler

\a rp  ( Forth return stack)        constant dsp  ( is our data stack)
\a sp  ( Forth data stack pointer)  constant rsp  ( is our return stack)

( Return stack macros.)
: rpush   ( r1)           1 regs>mask  asm{{  push  }} ;
: rpush2  ( r1 r2)        2 regs>mask  asm{{  push  }} ;

: rpop   ( r1)           1 regs>mask  asm{{  pop  }} ;
: rpop2  ( r1 r2)        2 regs>mask  asm{{  pop  }} ;

( NOTE: The above warning about order is relevant here too!)
( These are pushed in the order given on the stack.)

( Data stack macros.)
( These are popped in register index order - lower to higher.)
: dpop   ( r1)       1 regs>mask  asm{{  dsp ldm  }} ;
: dpop2  ( r1 r2)    2 regs>mask  asm{{  dsp ldm  }} ;
: dpop3  ( r1 r2 r3) 3 regs>mask  asm{{  dsp ldm  }} ;

( Fetch and store FLASH_xxx registers.)
\a r4 constant freg-base

: freg!  ( flashreg-offset src-reg)
   asm{{  \f push  FLASH_ACR -  freg-base  \f pop  str  }} ;

( We sometimes want to read or write byte-sized values to the flash regs.)
: fregb@  ( flashreg-offset dest-reg)
   asm{{  \f push  FLASH_ACR -  freg-base  \f pop  ldrb  }} ;

: fregb!  ( flashreg-offset src-reg)
   asm{{  \f push  FLASH_ACR -  freg-base  \f pop  strb  }} ;
forth

( Tell the disassembler about these register names.)
-: ( reg)
   15 and  3 *
   z" w  x  y  z  fr dspip topr8 up r10r11r12rsplr pc " +  3 -trailing type ;

: asm-regs   [ #] is .reg ;   asm-regs


( Any chip with sectored flash probably has lots of RAM, so let's use a
  4 Ki ram flash buffer.)

4 Ki constant #flashbuf

( Leave room for 64 cells on sp stack; room for 256 bytes of flash
  programming code; round down to multiple of 256, then leave #flashbuf
  bytes of space for buffer.)

( Start the flash routines *after* the flashbuf.)

\m sp0  64 \m cells -  256 - ( flash code)  -256 and  dup constant @flash-routines
                                             #flashbuf -  constant @flashbuf
hex
__meta

ram  here  ( we are going to return here after compiling the flash routines.)

@flash-routines goto  ( starting address of flash routines)

label unlock
   FLASH_ACR freg-base lit
   x w dpop2   FLASH_KEYR w freg!   FLASH_KEYR x freg!
   0 w movs    FLASH_CR   w freg!  ( clear any program/erase bits)
   lr bx  ;c
   pool,

label lock
   80 ( LOCK) w movs
   FLASH_CR 3 + w fregb!
   lr bx  ;c

label -busy
   x w rpush2
   1 ( BSY) w movs
   begin   FLASH_SR 2 + x fregb@   x w tst   0= until
   x w rpop2
   lr bx  ;c

( w is flash sector to erase)
label stm32-erase  ( sector#)
   lr rpush
   w dpop   3 w w lsls  ( shift sector# up 3 bits)
   2 ( SER)  w w adds   FLASH_CR     w freg!  ( set SER + sector number)
   1 ( STRT) w movs     FLASH_CR 2 + w fregb! ( set STRT bit)
   -busy bl
   pc rpop  ;c

( w is byte count, x is flash address,
  y is ram buffer address, z is offset.)
label stm32-flash-chunk  ( buf a u)
   lr rpush
   y x w dpop3
   1 ( PG)    z movs   FLASH_CR    z freg!  ( set PG bit)
   2 ( psize) z movs   FLASH_CR 1+ z fregb! ( psize=2; program by 32bit word)
   0 z movs  ( offset)
   begin
      ( unlike paged flash, we can program by words!)
      z y top ldr   z x top str
      4 z z adds
      -busy bl
      w z cmp
   u>= until
   pc rpop  ;c

.ifdef testing

( w is byte count, x is dest address, y is src address, z is offset. Copy
  by words, not halfwords.)
label copy-mem  ( src dest count)
   y x w dpop3
   0 z movs  ( offset)
   begin
      z y top ldr   z x top str
      4 z z adds
      w z cmp
   u>= until
   lr bx  ;c

.then  ( testing)

( This looks a litte bit goofy because we have to switch stack pointers
  before executing the code, and then switch back afterwards - except that
  we don't care about the return stack pointer after our code has executed;
  we assume that the R stack is empty. We don't really need the data stack
  pointer either, but we push it anyway, just in case.

  We make sure to disable interrupts before calling our code!)

label execute-assembly
   cpsid  ( disable interrupts)
   { top w } pop   sp rp mov   w sp mov   dsb   isb   top blx
   rp sp mov
.ifdef testing
   { top freg-base z y x w } push
.then
   0 bkpt ;c

align  ( make sure RAM region is word-aligned)

here @flash-routines -  constant #flash-routines   ( size of the code)
goto  ( return to saved here)

__host

forth

.ifdef testing

: .rxregs  ( top freg z y x w)
   cr  ."        W         X         Y         Z      FREG       TOP        SP"
       (  00000000  00000000  00000000  00000000  00000000  00000000  00000000 )
   cr       .h32__    .h32__    .h32__    .h32__    .h32__    .h32__  tsp @ .h32__ ;

.else  ( not testing)

: .rxregs ;

.then  ( testing)

( For quick and dirty execution of remote assembly code.)
: rx  ( x0 .. xn 'code rp - y0 .. yn <regs>)
   ?chat  1+ ( thumb)  \m rp0
   stack>  \m execute-assembly runwait  stack<  .rxregs ;
