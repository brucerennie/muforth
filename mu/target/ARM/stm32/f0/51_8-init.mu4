( This file is part of muforth: https://muforth.dev/

  Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

( Moved F051 init code here, so it can be shared among projects.)

__meta
hex

: wait-for-rdy  ( regaddr)
   begin  dup c@  2 and  until  ( wait for RDY bit)  drop ;

comment %%
  NOTE: This example assumes that you are using an STM32F0 Discovery board.
  On that platform, the ST-LINK drives a clock signal to the F051 that we
  can use. If you have an external crystal instead, change the first line
  to read something like this:

   1 ( HSEON) [ RCC_CR 2 + #] tuck c!  wait-for-rdy ( wait for HSERDY)
%%

( Turn on HSE, which is driven by an 8 Mhz signal from the ST-LINK. Use it
  to drive the PLL to 48 Mhz - x6 - and when the PLL stabilizes, switch to
  it as the system clock source.)

: clock-init
   1 ( latency) FLASH_ACR set!  ( we need one cycle for 48 MHz clock!)
   5 ( HSEON + HSEBYP) [ RCC_CR 2 + #] tuck c!  wait-for-rdy ( wait for HSERDY)
   0011_0000 RCC_CFGR ! ( PLLMUL=6; PLLSRC=HSE)
   1 ( PLLON)          [ RCC_CR 3 + #] tuck c!  wait-for-rdy ( wait for PLLRDY)
   2 ( SW=PLL as sysclk)  RCC_CFGR tuck c!
   begin  dup c@ %1010 =  until  ( SW=PLL and SWS=PLL)  drop ;

: led-init
   -- Turn on clock to Port C
   ( Ports -FED_CBA- )
        [ %0000_1000  #16 << #] RCC_AHBENR set!
   -- Make PC8 and PC9 outputs
   [ %0101 #16 << #] GPIOC_MODER set! ;

: wait   for next ;
: flash-leds   %11_0000_0000 dup GPIOC_BSRR !  2_0000 wait  GPIOC_BRR ! ;
