( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2023 David Frech. (Read the LICENSE for details.)

loading PIC16/18 SPI flash programming (STM32 core)

( It might seem rather odd that this is here, but I'm interested in using
  an STM32 Discovery board as a "programming pod" for Microchip PIC16 and
  PIC18 microcontrollers, which have a simple SPI interface for erasing,
  programming, and reading the on-chip memories and configuration bytes.

  The idea is basically this:

  [1] the STM32 chip sits in a loop, reading a word of the RAM until a
  magic number appears there. This is the "semaphore" signal from the host
  that a command packet is available. When it sees the magic word, it goes
  to step 2.

  [2] The STM32 turns around and talks to the target chip via SPI, sending
  the command, and reading or writing the payload, if any. It buffers the
  response, and then writes a different magic number to the semaphore word,
  signaling the host that it has completed the command.

  Then it goes back to [1]. The host reads the buffered target response,
  creates a new command packet, and sets the semaphore word.

  Programming the flash, EEPROM, and config bytes is done one word/byte at
  a time. It makes sense to buffer several of these and do them all at once,
  but initially I want to just be able to talk to the chip.

  The communication between the STM32 and the host can be over ST-LINK,
  which means that no USB-serial interface is necessary. The STM32 Discovery
  board can power the target as well.

  There is no need to flash this code into the STM32. It can easily run
  from RAM.)

__meta
decimal

( The ST-LINK code will have written some flash programming routines into
  ram. We don't need these, so let's back up over them and start fresh.)

ram  wipe

( We want to put the data structures that the host will use to communicate
  with the STM32 at the beginning of RAM so we know where to find them.
  Remember: when *using* this code, the host will have loaded PIC code into
  the memory spaces. It will have no idea about how the memory of the STM32
  is laid out, so we set up a simple, constant layout - data first, then the
  program.)

( Let's put the big stuff first. Makes it easy to find when debugging.)
here equ data        256 allot  ( memory read/write buffer)
here equ semaphore  cell allot  ( semaphore + stm32 command)

( XXX this needs to change; left over from AVR/8051 copy-pasta.)
here equ cmd           1 allot  ( flash command)
here equ addr                   ( flash addr)
here equ addr-hi       1 allot
here equ addr-lo       1 allot
here equ result                 ( single byte result)
here equ toggle        1 allot  ( flash command toggle - for AVR)
here equ count                  ( byte count to transfer)
here equ out-count     2 allot  ( byte count to write)
here equ in-count      2 allot  ( byte count to read)

hex

( We want to write this code in Forth, so let's load the Forth kernel.)
ld target/ARM/v6-m/kernel-itc.mu4

-- ------------------------------------------------------------------------
-- Chip init
-- ------------------------------------------------------------------------
#48,000,000 equ cpuclk
.ifdef stm32f072
   ld target/ARM/stm32/f0/72_b-init.mu4
.then
.ifdef stm32f303
   -d cpuclk-48m
   ld target/ARM/stm32/f3/03_c-init.mu4
.then


-- ------------------------------------------------------------------------
-- Timers and delays
-- ------------------------------------------------------------------------
( The PIC programming process requires several delays. Some are a few
  microseconds; others, a few milliseconds. Let's use one of the timers to
  do accurate timing.

  TIM6 and TIM7 are basic timers. Let's use TIM6.

  We are going to clock the timer at 1Mhz, and set it up for "one-shot"
  mode. It will stop counting and set the "update" flag when the count
  register reaches the reload value.)

: ?timer
   0 TIM6_SR !
   1 ( CEN) TIM6_CR1 set!
   begin  TIM6_SR @  until ;

: us  ( n)  ( delay n microseconds)
   TIM6_ARR !  ?timer ;

: ms  ( n)  #1000 * us ;


.ifdef timer-testing

( Run TIM7 in an endless loop at full speed so we can test that TIM6 is doing
  the right thing. TIMx_ARR resets to 0ffff, so we can leave it alone.)

( Run timer7 full bore!)
: timer7-init
   0 TIM7_PSC !  ( set prescaler)
   1 ( CEN) TIM7_CR1 ! ( start it!) ;

( NOTE: I used this when I was still trying to use the *hardware* SPI
  interface. I gave up on trying to get this to work and wrote some bitbanging
  routines instead. I'm leaving this here because it's an example of using a
  timer to measure some external input - in this case, counting clock edges.

  We are going to use the external trigger input, TIM3_ETR, which is AF0 on
  pin PD2.)

: timer3-init
   ( Clock to port D.)
   [ 1 #16 4 ( D) + << #] RCC_AHBENR set!

   ( AF0 on PD2.)
   [ %10 2 2* << #] GPIOD_MODER set!  ( 2 bits per pin)

   ( Clock to TIM3.)
   2 RCC_APB1ENR set!

   ( Trigger on falling edge of ext trigger input.)
   c000 TIM3_SMCR !

   ( Enable timer.)
   1 ( CEN) TIM3_CR1 ! ;

: ttest  ( n)
   TIM7_CNT @  swap us  TIM7_CNT @  swap -  0ffff and ;

.then  ( timer-testing)


: timer-init
   [ 3 4 << #] RCC_APB1ENR set!  ( enable clocks to TIM6 and TIM7)
.ifdef timer-testing  timer7-init  timer3-init  .then
   8 ( OPM - one pulse mode) TIM6_CR1 !
   [ cpuclk #1,000,000 / 1- #] TIM6_PSC !  ( set prescaler)
   1 TIM6_EGR ! ( generate update event) ;


-- --------------------------------------------------------------------
-- Big- and little-endian values
-- --------------------------------------------------------------------
( Little endian.)

( Split a value into its high part and low byte.)
: >hilo  ( v - hi lo)  dup 8 u>>  swap [ 1 8 << 1- #] and ;

( Join a low byte and a high part into a value.)
: lohi>  ( lo hi - v)  8 << or ;

( Big endian.)

( Split a value into its low byte and high part.)
: >lohi  ( v - lo hi)  >hilo  swap ;

( Join a high part and a low byte into a value.)
: hilo>  ( hi lo - v)         swap  lohi> ;


-- --------------------------------------------------------------------
-- Buffering sent and received data
-- --------------------------------------------------------------------
( Since we are going to be reading a buffer sent to us by the host, let's
  have nice words for that.)

variable p
: p@   p @  c@       ;  ( read next byte from buf, don't incr)
: p*   p @  c@+  p ! ;  ( read next byte from buf, incr)
: p&   p @  c!+  p ! ;  ( write next byte to buf, incr)


-- --------------------------------------------------------------------
-- Bitbanged half-duplex SPI
-- --------------------------------------------------------------------
( I'm giving up - again! - on the STM32's SPI interface. It seems to
  broken, and the design makes it somewhere between difficult and
  impossible to talk to the PIC programming interface, which *shares* a
  single bi-directional data line between master and slave.)

-- ------------------------------------------------------------------------
-- PIC18F-Q programming
-- ------------------------------------------------------------------------
.ifdef pic18f-q

( Load the bitbanged SPI code.)
-d msb-first
-d fast-bits  ( use the fast assembly code)
ld target/ARM/stm32/bitbanged-spi-half-duplex.mu4

: t_enter_prog  1 ms ;
: t_dly  ( nominally 1us)  1 us ;
: t_erase  #11 ms ;  ( bulk or page erase)
: t_prog_eeprom_config  #11 ms ;
: t_prog_flash  #75 us ;

( The string "MCHP" is the initialization bit string that must be clocked
  into the target, MSB first.)

: +prog
  reset\  t_enter_prog  [ token MCHP drop bew@ #] #32 >bits drop  t_enter_prog ;

( Combine a command and payload; send the command; delay.)
: cmd+payload  ( payload cmd - payload')  #23 <<  + 2*  8 >bits  t_dly ;

( Send a bare command with no payload; delay.)
: cmd     ( cmd)  0 swap cmd+payload drop ;

( Send a command; delay; send a payload.)
: cmd+wr  ( payload cmd)  cmd+payload  #24 >bits  drop ;

( Send a command; delay; recv a payload.)
: cmd+rd  ( cmd - payload)  cmd  #24 bits>  2/ 0ffff and ;

: !p   ( a)      80 cmd+wr  t_dly ;
: p@+  ( - u)   0fe cmd+rd  t_dly ;
: p!+  ( w)     0e0 cmd+wr  t_prog_flash ;

: tt  timer-init  spi-init  reset/  +prog
      3f_fffc !p  p@+ p@+ ;

.then ( pic18f-q)


-- ------------------------------------------------------------------------
-- PIC16F145x programming
-- ------------------------------------------------------------------------
.ifdef pic16f145x

( Load the bitbanged SPI code.)
-d lsb-first
-d fast-bits  ( use the fast assembly code)
ld target/ARM/stm32/bitbanged-spi-half-duplex.mu4

: t_enter_prog  1 ms ;
: t_dly  ( nominally 1us)  1 us ;
: t_erase  #11 ms ;  ( bulk or page erase)
: t_prog_eeprom_config  #11 ms ;
: t_prog_flash  #75 us ;

( The string "MCHP" is the initialization bit string that must be clocked
  into the target, LSB first. Everything else is LSB first as well, unlike
  the PIC18F-Q.)

: +prog
   reset\  t_enter_prog  [ token MCHP drop bew@ #] #33 >bits drop  t_enter_prog ;

( On the 16F145x, commands are 6 bits and the payload is 16 bits: 14 bits
  of data, plus a start and stop bit.)

( Combine a command and payload; send the command; delay.)
: cmd+payload  ( payload cmd - payload')  swap 7 << +  6 >bits  t_dly ;

( Send a bare command with no payload; delay.)
: cmd     ( cmd)  0 swap cmd+payload drop ;

( Send a command; delay; send a payload.)
: cmd+wr  ( payload cmd)  cmd+payload  #16 >bits  drop ;

( Send a command; delay; recv a payload.)
: cmd+rd  ( cmd - payload)  cmd  #16 bits>  #17 u>>  03fff and ;

: config!  ( w)  00 cmd+wr  t_dly ;  ( load configuration latch; set addr to 8000)
: prog!    ( w)  02 cmd+wr  t_dly ;  ( load program memory latch)
: p@     ( - w)  04 cmd+rd  t_dly ;  ( read program/config memory)
: p+             06 cmd     t_dly ;  ( increment address)
: !p             16 cmd     t_dly ;  ( reset address to 0000)

( Call this uu because I want to use this PIC as a USB device. ;-)
: uu  timer-init  spi-init  reset/  +prog ;

( Read device id and revision and few other things.)
: rr  uu
      0 config!  p+ p+ p+ p+  7 for  p@ p+  next ;

.then ( pic16f145x)


-- ------------------------------------------------------------------------
-- Serial communication - UART
-- ------------------------------------------------------------------------
: uart-init
   -- First, enable clocks to Port A. We are using uart1 on pins PA9 and PA10.
   [ 1 #16 1 ( A) + << #] RCC_AHBENR set!

   -- Enable clocks to uart1 as well.
   [ 1 #14 << #] RCC_APB2ENR set!

   -- Set mode bits (%10) and alternate function (AF1) for uart.
   [ %1010 #9       2*  << #] GPIOA_MODER set!  ( 2 bits per pin)
   [    11 #9  8 -  4 * << #] GPIOA_AFRH set!   ( 4 bits per pin)

   -- Now for the uart itself.
   USART1_CR1  0 over ! ( reset and disable USART)
   %1100 ( TE+RE) ( enable tx and rx)  over set!
   [ cpuclk #38,400 / #] USART1_BRR !
   1 ( UE) ( enable USART)  swap set! ;

: ?uart-status  ( bit)
   begin  USART1_ISR @  over and  until  drop ;

: uart-recv  ( - b)   [ 1 #5 << ( RXNE bit) #] ?uart-status  USART1_RDR @ ;
: uart-send  ( b)     [ 1 #7 << ( TXE bit)  #] ?uart-status  USART1_TDR ! ;

: uart-send-recv
   data p !  out-count h@ for  p* uart-send  next
   data p !   in-count h@ for  uart-recv p&  next ;


-- ------------------------------------------------------------------------
-- Jump tables
-- ------------------------------------------------------------------------
: (dispatch)  ( index)
   1+ cells r@ +
   dup r@ @ u< if  r> drop  @execute ^  then
   drop  r> @ >r  ( skip jump table and keep executing) ;

compiler: [:  ( start a jump table)
   \t (dispatch) ,  here  0 , ( ip past last cfa) ;

compiler: :]  ( end a jump table)
   here  swap  image-! ;


-- ------------------------------------------------------------------------
-- Core command processing loop
-- ------------------------------------------------------------------------
( Command index is above the word that it executes.)
: do-command  ( n)
           ( 10    11        12 )
   10 - [:  reset\  reset/  uart-send-recv  :] ;

here ]  ( chip-init)
   clock-init  led-init  timer-init  spi-init  uart-init  flash-leds
   reset/
   begin
      face_d000 semaphore !  ( ready for another command)
      0  begin  drop  semaphore @  dup ffff_ff00 and  deca_f000 =  until
      0ff and  ( command byte)  do-command
   again [

( Startup code! Since we have a Forth kernel, let's write the startup code
  in Forth!)

label startup
   ( Ignore the sp we were passed. Set rp to top of ram, sp below.)
   @ram #ram + rp lit   rp sp mov   #64 cells # sp sp sub
   cpsid  ( disable interrupts)
   ( chip-init)  ip  lit
   deca_fbad     top lit
   next  ;c
   pool,


( XXX The following is for interactive testing and needs to go away
  eventually.)

.ifdef testing

: shuffle  ( cmd addr data - data addr-lo addr-hi cmd)
   -rot  >lohi  rot ;

: index  ( offset)
   100 0 do  dup i +   i data + c!  loop  drop ;

: wipe
   100 0 do  0ff i data + c!  loop ;

.then  ( testing (interactive)
