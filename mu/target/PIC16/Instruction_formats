Condition codes (Cond):
  D = digit carry  (for decimal math - we ignore this ;-)
  C = carry
  Z = zero

Note: This is one of the few (and the proud?) architectures that implements
borrow in the "natural" way - that is, borrow = not carry.

Note also: there are *structural* similarities with the PIC18 encoding, but the
actual opcode values are different!


Opcode bits        Name     Cond   Notes
=================  =======  =====  =====
00 0000 0000 0000  nop
00 0000 0000 0001  reset    DCZ

00 0000 0000 1000  return          subroutine return
00 0000 0000 1001  retfie          return from interrupt and enable

00 0000 0000 1010  brw             relative branch with W
00 0000 0000 1011  callw           call subroutine with W

( For these two instructions, the following table applies:
  mm = 00  pre-incr    ++@FSRn
       01  pre-decr    --@FSRn
       10  post-incr   @FSRn++
       11  post-decr   @FSRn--
)
00 0000 0001 0nmm  moviw           move indirect via FSRn to W; mm is inc/dec
00 0000 0001 1nmm  movwi           move indirect via FSRn from W; mm is inc/dec

00 0000 001k kkkk  movlb	   move literal to BSR (bank register)

00 0000 0110 0010  option          Load OPTION_REG from W
00 0000 0110 0011  sleep
00 0000 0110 0100  clrwdt          clear watchdog timer
00 0000 0110 01pp  tris            load TRIS register from W; pp=1,2,3, for A,B,C

00 0000 1fff ffff  movwf           f = w

00 0001 0000 00xx  clrw     Z      clear w
00 0001 1fff ffff  clrf     Z      clear f

( d=0 means dest is W; d=1 means dest is F)
00 0010 dfff ffff  subwf    DCZ    f/w = f - w (!!)
00 0011 dfff ffff  decf     Z      f/w = f - 1

00 0100 dfff ffff  iorwf    Z      f/w = f or w
00 0101 dfff ffff  andwf    Z      f/w = f and w
00 0110 dfff ffff  xorwf    Z      f/w = f xor w
00 0111 dfff ffff  addwf    DCZ    f/w = f + w

00 1000 dfff ffff  movf     Z      f/w = f  (tst?)
00 1001 dfff ffff  comf     Z      f/w = ~f
00 1010 dfff ffff  incf     Z      f/w = f + 1
00 1011 dfff ffff  decfsz          decrement f, skip if 0

00 1100 dfff ffff  rrf      C      f/w = f rotate right thru carry
00 1101 dfff ffff  rlf      C      f/w = f rotate left thru carry
00 1110 dfff ffff  swapf           f/w = swap_nybbles(f)
00 1111 dfff ffff  incfsz          increment f, skip if 0

( 01 is just the bitops!)
01 00bb bfff ffff  bcf             bit clear f
01 01bb bfff ffff  bsf             bit set f

01 10bb bfff ffff  btfsc           bit test f, skip if clear
01 11bb bfff ffff  btfss           bit test f, skip if clear

11 0000 kkkk kkkk  movlw           w = k
11 0001 0nkk kkkk  addfsr          add k to FSRn (k is signed)
11 0001 1kkk kkkk  movlp           move literal to PCLATH
11 001k kkkk kkkk  bra		   relative branch

11 0100 kkkk kkkk  retlw           w = k, return
11 0101 dfff ffff  lslf     CZ     f/w = f lsl 1
11 0110 dfff ffff  lsrf     CZ     f/w = f lsr 1
11 0111 dfff ffff  asrf     CZ     f/w = f asr 1

11 1000 kkkk kkkk  iorlw    Z      w = k or w
11 1001 kkkk kkkk  andlw    Z      w = k and w
11 1010 kkkk kkkk  xorlw    Z      w = k xor w
11 1011 dfff ffff  subwfb   DCZ    f/w = f - w - borrow (~C)

11 1100 kkkk kkkk  sublw    DCZ    w = k - w (!!)
11 1101 dfff ffff  addwfc   DCZ    f/w = f + w + C
11 1110 kkkk kkkk  addlw    DCZ    w = k + w
11 1111 0nkk kkkk  moviw           w = mem(k + FSRn)
11 1111 1nkk kkkk  movwi           mem(k + FSRn) = w
