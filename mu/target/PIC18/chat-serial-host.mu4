( This file is part of muforth: https://muforth.dev/

  Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading PIC18 Serial chat (host)

hex

( Taking inspiration from the wildly successful HC08 serial chat protocol.

  Responds to the following commands. NOTE: these are hex values!

00 - 0f  Idle   - these command bytes are ignored

10  Version     - read 4 bytes of little-endian version
11  SetP        - set p - the program memory address pointer
12  SetX        - set x - the data memory address pointer
13  GetX        - get x - the data memory address pointer
14  Run         - load PC from p
15  ReadProg    - read a byte from program memory, incr p pointer
16  ReadData    - read a byte from data memory, incr x pointer
17  WriteData   - write a byte to data memory, incr x pointer

18 - ff  Idle   - these command bytes are ignored
)

: >b  send ;
: b>  recv ;

: >w  ( w)         >hilo  >b >b ;   ( send word little-endian)
: w>  ( - w)  b> b> lohi> ;         ( recv word little-endian)

: cx.idle                   0 >b ;
: cx.version     ( - w)    10 >b  b> b> b> b>  0123> ;
: cx.set-p       ( a)      11 >b  >hilo >b  >w ;  ( send 24 bit address)
: cx.set-x       ( a)      12 >b            >w ;  ( send 16 bit address)
: cx.get-x       ( - a)    13 >b      w> ;
: cx.run         ( )       14 >b ;
: cx.read-prog   ( u)      15 >b  >b ;  ( send byte-sized count, then streaming read)
: cx.read-data   ( u)      16 >b  >b ;  ( send byte-sized count, then streaming read)
: cx.write-data  ( b)      17 >b  >b     ;

( Send three no-ops, let them transmit, _then_ throw away any input bytes.)
: resync  cx.idle cx.idle cx.idle  drain  flush ;

( Hook into interact code.)
: c.hello  ( - chunk-size)
   #115200 bps  resync
   cr ." Chat firmware version "
   cx.version  radix preserve  hex  sep preserve  -sep   u.
   /page ( return erase page size as chunk size) ;

: c.run  ( cp pc)  cx.set-p  cx.set-x  cx.run ;

: c.read-buf  ( buf u)  for  b>  swap c!+  next  drop ;

: c.read-data  ( buf a u)  swap cx.set-x  dup cx.read-data  c.read-buf ;
: c.read-prog  ( buf a u)  swap cx.set-p  dup cx.read-prog  c.read-buf ;

: c.write-data  ( buf a u)
   swap cx.set-x  for  c@+ swap  cx.write-data  next  drop ;

( space = 0 means flash/config/eeprom; 1 means data/ram/io)
: c.read-space  ( buf a u space)  if  c.read-data ^  then  c.read-prog ;

( XXX dummy placeholders for now)
: c.write-eeprom  ( buf a u)  2drop drop ;
: c.erase  ( a)  drop ;
: c.program  ( buf a u)  2drop drop ;

: c.app-start ;
: c.app-stop ;
: c.flash-begin ;
: c.flash-end ;

comment %%
chat-cmd t.hello         ( - chunk-size)
chat-cmd t.get-status    ( - cp)
chat-cmd t.run           ( cp pc)
chat-cmd t.read-space    ( buf a u space)
chat-cmd t.write-data    ( buf a u)
chat-cmd t.write-eeprom  ( buf a u)
chat-cmd t.app-start
chat-cmd t.app-stop
chat-cmd t.flash-begin
chat-cmd t.flash-end
chat-cmd t.erase         ( a)
chat-cmd t.program       ( buf a u)  %%

: chat   chat-via
   c.hello  cx.get-x  c.run  c.read-space  c.write-data  c.write-eeprom
   c.app-start  c.app-stop  c.flash-begin  c.flash-end  c.erase  c.program ;
