( This file is part of muforth: https://muforth.dev/

  Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

( This is for non-Forth code that simply needs to switch stack pointers
  between two or more independent tasks. Each task has its own stack and a
  small "user area"; yield does not push or pop any registers: that is each
  task's responsibility.

  This file should be treated as a template; copy and modify it to fit your
  needs.)

loading AVR tasks (simple)

( All of the task stacks live in a single 256 byte page - generally the
  *last* page of the ram. This way task "pointers" only consume a single
  byte in the user area, and task switching is very fast: a single byte load!

  The first byte of the user area is the status flag; the second byte is
  the "pointer" to the next task. The next two bytes are the saved sp.

  TODO: Since the stacks all live in the same page, the saved sp only has
  to be the low 8 bits! Fix this.

  XXX: This could easily work with two stacks - whether running "Forth"
  code or straight assembler code that wants the neat parameter passing that
  a second stack provides - by adding a second stack pointer. This could also
  be a single byte: the parameter stacks could live either in the same page
  as the return stacks and task areas, or in the page below; but in either
  case, since *all* the parameter stacks would fit into a page, the high byte
  doesn't have to be stored.

  XXX: The only problem is that y is a great register to use for the
  parameter stack pointer, and we use it here as a temporary user pointer
  while searching for a task to run...

  A status byte that is <0 means runnable; >=0 means stopped. Doing it this
  way makes it easy to use the status field as a counting semaphore.)

__meta

( User pointer is stored in registers r14 and r15. We have made synonyms
  for the registers in target/AVR/meta.mu4)

( We have to make sure that the *very* *first* piece of code loaded into
  the boot region, after the RESET vector, is yield.)

here  origin 1 vectors +  xor .if
   origin  1 vectors +  goto
   warn"
Boot region contains code after the RESET vector. This will break
the tasking code. That code has been removed... "
.then

hook create-task-hook

( yield by default pushes no registers! The caller is responsible for
  saving and restoring, around the call to yield, any registers they care
  about.)

label yield
   u y movw  ( get user pointer into y)
   w sp@  2 w stuw  ( get current sp and save it into user area)

   ( We have to find a task to run. It's possible that an interrupt could
     wake a sleeping task, so we just try and try until something is ready.

     If one of the tasks is a chat/debug stub, its status is always <0, so
     it will always run.)

   begin
      1 yl ldu  ( follow pointer to next task)
      0 g0 ldu  ( load task's status byte)
   g0 tst  0< until
   ( Found a live one; fall through to run it.)  ;c

label run-task
   y u movw  ( set user pointer from y)
   2 w lduw  w sp!  ( restore sp from user area)
   ret  ( run!)  ;c

( Enter with:
  h1:h0 = initial pc
     h2 = prev user area low byte pointer
      y = current user area
  Exit with:
     h2 = current user area low byte pointer
)
hooks create-task-hook
label create-task
    1 h2 stu   ( pointer to prev task)
   yl h2 mov   ( prev task = this task)
   ( fall thru)  ;c

( Enter with:
  h1:h0 = initial pc
      y = current user area

  Clobbers h0.
)
label init-task
   ( Create an initial stack frame: just the starting PC.)
   y x movw                ( x is our temp sp)
   -x h0 st  -x h1 st      ( push pc: big endian!)
   1 x sbiw                ( empty descending fixup)
   2 x stuw                ( save temp sp to user area)
   "ff h0 ldi  0 h0 stu    ( set initial status: runnable)
   ret  ;c

comment
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
( This is example code. It has to be loaded *after* all your other code,
  because it sets up and runs the top-level routines that make up your
  program. Consider this a template to start from.)

( Every task has roughly the following form:)
label example-task
   example-init rcall
   begin  ...  <push regs>  yield rcall  <pop regs>  ...  again  ;c

RESET handler
label system-startup
   ( Before we do anything else, let's start with a clean slate, by zeroing
     the entire RAM.)

   @ram x ldiw  #ram w ldiw  g0 clr  begin  x+ g0 st  1 w sbiw  0= until

   ( Set up a temporary stack - so we can call setup-task! - below the task
     stacks. Since the stacks consume at most a 256 byte page, the page
     below the last one will do fine.)

   @ram #ram +  #256 - 1- w ldiw  w sp!-iclear

   ( Create the tasks and start executing! create-tasks should leave y
     pointing to the first task to run.)

   create-tasks rcall  run-task rjmp  ;c
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
