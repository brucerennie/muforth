( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2023 David Frech. (Read the LICENSE for details.)

loading AVR interaction

variable chatting

variable chat-vector
: chat-cmd   ( index - index+1)  dup  addrs constant  1+
             does> @  chat-vector @ =if  +  addr@ execute  ^  then  2drop
                error" Not connected to a chat-capable target" ;

: chat-fail   error" Chat command not implemented" ;

0
chat-cmd t.hello         ( - chunk-size)
chat-cmd t.get-status    ( - rp)
chat-cmd t.run           ( rp)
chat-cmd t.read-space    ( buf a u space)
chat-cmd t.write-data    ( buf a u)
chat-cmd t.write-eeprom  ( buf a u)
chat-cmd t.app-start
chat-cmd t.app-stop
chat-cmd t.flash-begin
chat-cmd t.flash-end
chat-cmd t.erase         ( a)
chat-cmd t.program       ( buf a u)
drop

( Choose a space based on host region.)
: choose-space
   h preserve
   'image  flash dup 'image = if drop 0 ^ then  ( flash)
           ram       'image = if      1 ^ then  ( ram/data)
                                      2 ;       ( eeprom)

: t.read       ( buf a u)  choose-space t.read-space ;
: t.read-data  ( buf a u)             1 t.read-space ;

: >chat
   ['] t.read   is |read    ( read from connected target)
   du-target  ( use the settings from the memory code) ;

( Chunk size is reported by the debug interface. Always use this when
  copying RAM contents or programming the flash!)

variable /chunk  ( chunk size, as reported by debug interface)

: copy-chunk  ( 'target len - 'target+len)
   -- cr ." copy-chunk "  2dup swap u. u.
   2dup + push  over image+ -rot t.write-data  pop ;

: copy-region  ( a u)
   -- cr ." copy-region "  2dup swap u. u.
   /chunk @  /mod ( r q)  swap push  for   /chunk @  copy-chunk  next
                                    pop  =if  ( rem) copy-chunk  drop ^  then  2drop ;

variable ram-copied  ( pointer to first un-copied byte)
: copy-ram
   h preserve  ram
   ram-copied @  dup 0= if  drop  \m origin  then
   \m here  over -  copy-region
   \m here  ram-copied ! ;


( chat-entry has pushed an "exception frame" onto the stack.

  The order, low to high: rah ral sreg pad tl th xl xh yl yh zl zh pch pcl
                  offset:  <skip>   0   1   2  3  4  5  6  7  8  9  10  11

  rah/ral is the return address to the "process" routine.
  NOTE: PC is pushed big-endian!
)

( Local copy of RP.)
variable trp

( Let's keep a local copy of the chat frame, like on the S08.)
12 buffer chat-frame
: treg  ( offset - taddr)  constant  does> @  chat-frame + ;

( There is a byte of padding above the SREG to word-align frame.)
 0 treg .SREG
 2 treg .T
 4 treg .X
 6 treg .Y
 8 treg .Z
10 treg .PC

: get-regs   t.get-status dup trp !  chat-frame swap 12 t.read-data ;
: set-regs   ( - rp)          trp @  chat-frame over 12 t.write-data ;

( Registers are little-endian 16 bit values. t prefix is for "target", like
  treg and tsp, above.)

: t@   leh@ ;
: t!   leh! ;

( For reading and writing PC values on the stack. Convert a normal address
  to an "ra" - return address - by shifting right one bit and swapping
  bytes; ra's are stored big-endian on the stack!

  To convert back, swap bytes and shift left.)

: >ra   ( a - ra)  \m cell/  >lohi hilo> ;
:  ra>  ( ra - a)            >lohi hilo>  \m cells ;

meta
: sp!  ( target-sp)      .Y  t! ;
: sp@  ( - target-sp)    .Y  t@ ;
: top!  ( target-top)    .T  t! ;
: top@  ( - target-top)  .T  t@ ;

( PC on R stack is big-endian and is a cell address, not a byte address.)
: pc!  ( target-cfa)    >ra  .PC  t! ;
: pc@  ( - target-cfa)       .PC  t@  ra> ;

.ifdef notyet  ( Forth stack stuff, mostly)

: rp0  \eq SPL  t@  1+ ;             ( bottom of target's R stack)
: sp0  chat-frame @  -2 and  64 - ;  ( bottom of target's D stack;
                                       room for 32 values on R)

: depth  \m sp0 \m sp@ -  \m cell/ ;  ( depth of actual stack)
: u.  u. ;
: .  . ;
: .s  .s ;

.then  ( notyet)

forth
: 2sp  space space ;
: 4#   # # # # ;
: .b8  binary  <#  4#  char _ hold  4#  #> type ;
: .h16    hex  <#  4#  #> type ;
: .w   .h16  2sp ;
: .r   ( addr)  t@  .w ;
: .sr   .SREG   t@  .b8   2sp ;

-- 005f reg  SREG     | I       T       H       S       V       N       Z       C

: .regs
   radix preserve
   cr  ." ITHS_VNZC     T     X     Y     Z    SP    PC"
       (  1000_0011  1234  3456  8738  abab  3a00  3b66 )
   cr           .sr .T .r .X .r .Y .r .Z .r
                                         trp @ .w
                                              \m pc@ .w ;

: hi
   chatting on  >chat  t.hello  /chunk !  get-regs  .regs
   -- ram-copied off  copy-ram
   -- now __chatting is __meta  __meta ;
   ;

: chat-via   pop  chat-vector !  hi ;

: run      ( pc)  \m pc!  ( copy-ram)  set-regs  t.run ;  ( don't wait for target)
: runwait  ( pc)  run  get-regs ;   ( wait for target)

: call  ( pc)  runwait .regs ;
: kick  ( pc)  run ;  ( when the code you're calling doesn't speak
                        the same protocol as running code)

: rx  ( cfa)  ( execute target non-forth word)
   chatting @ 0= if  error" not connected to target"  then
   runwait .regs ;


.ifdef notyet  ( more stack stuff)

( The semantics of moving cells to and from the target stack are a bit
  complicated.

  When the target stack is empty, sp0 = sp, and the top register contains
  garbage.

  When the target stack isn't empty, the distance between sp0 and sp is
  2*depth, but the bottom-most cell is garbage, and top is valid.)

: stack>  ( "push" stack to target)
   depth 0= if  "cafe \m top!  \m sp0 \m sp!  ^  then
   \m top!
   depth 7 min  ( more than that would be silly)
   \m sp0 over 1+ \m cells -  dup \m sp! ( top of D stack)  swap
   for  tuck t!  \m cell+  next  ( copy each cell as a word to D stack)
   "cafe swap t! ( push bottom) ;

: stack<  ( "pop" stack from target)
   \m depth 0 max 8 min  ( more than that would be silly)  =if
      1- ( depth, excluding top)  =if
         \m sp@ over  ( n sp n)
         for  dup t@  pop 2push  \m cell+  next  ( starting with top, push to R)
         drop ( sp)
         for  2pop push  next  ( pop from R to reverse order)
         0
      then  \m top@  swap
   then  drop ;

( Get target's hardware SP - ie, forth's return stack ptr - and store into
  chat-frame.)

: get-rp   \m rp0  \m cell+ ( skip ret addr)  chat-frame ! ;

: chat  +chat  >chat  avrchat.Hello  get-rp  .regs ;
: copy-ram ;  ( XXX no-op)
: runwait  zgo  get-rp  .regs ;

( XXX Should we try to automatically connect to target?)
: remote  ( cfa)  ( execute target forth word)
   chatting @ 0= if  error" not connected to target"  then
   copy-ram  \m pc!  stack>  runwait  stack< ;

: rx  ( cfa)  ( execute target non-forth word)
   chatting @ 0= if  error" not connected to target"  then
   copy-ram  \m pc!          runwait ;


( Interacting with a chatty, connected target.)

-:  ."  (interacting with target)"  ;
-:
      .meta. find  if  execute          ^  then  ( labels are in .meta.)
    .target. find  if  execute  remote  ^  then  ( execute as forth word)
   .equates. find  if  execute          ^  then
.ifdef no-number                                 complain ;
.else                                            number ;
.then
mode __target

.then  ( notyet)


( Set |@ and |c@ to _some_ form of target fetch. Prefer to get bytes from
  target if we're connected. This word is useful so we can set an initial
  state for target's  du  and  dis  so that inspect won't crash when it
  runs |@ to get a default ea.)

: >target  chatting @ if  >chat ^  then  >image ;


( Define our own key bindings for memory dumping and disassembly. We'll
  default to host bindings if there isn't one in our array. This way we
  only have to define the "delta" between host and target behaviours.)

128 array avr-seekeys

( Default key action is to run host key code)
host-seekeys avr-seekeys  128 cells cmove

( Support for dumping memory)
: 1dump  ( a)
   hex-bytes  ( set field width)
   >image   dup .addr  dup .hex-bytes
   chatting @ if
      -valid
      >chat   dup _addr  dup .hex-bytes
      -valid
   then
   drop ( a) ;

( So we can easily look at the signature embedded into the image.)
: 1dump-chars  ( a)
   hex-bytes
   >target
   dup _addr  dup .chars
   dup .addr  dup .hex-bytes
   drop ;

avr-seekeys  -1  du-mode dumping        >target  skip+  skip-  1dump        ( a - a')
avr-seekeys  -1  du-mode dumping-chars  >target  skip+  skip-  1dump-chars  ( a - a')
avr-seekeys  -1  du-mode disasming      >target  dis+   dis-   1dis         ( a - a')

avr-seekeys 'seekeys !  ( switch over to our bindings)

key: d  ( a - a 0)   dumping        0 ;
key: C  ( a - a 0)   dumping-chars  0 ;  ( small c is "call")
key: i  ( a - a 0)   disasming      0 ;

host-seekeys 'seekeys !  ( back to host bindings)


( Interactive)

( make an alias so we can still get to it)
: _du  du ;

: du   ( a - a')   dumping    inspect ;
: dis  ( a - a')   disasming  inspect ;

meta
: du   du ;
: dis  dis ;

forth
