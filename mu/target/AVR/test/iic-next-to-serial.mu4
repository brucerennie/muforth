( This file is part of muforth: https://muforth.nimblemachines.com/

  Copyright 2002-2023 David Frech. (Read the LICENSE for details.)


( Running serial- and ic2-chat side-by-side with a simple multitasker!

  We talk to one via USB serial interface, and to the other via STM32
  firmware which talks I2C to the AVR chip.

  For debugging, there is a buffer to record the sequence of I2C status
  values that are received, as a window into the workings of I2C on AVR.)

loading AVR testing version of I2C next to serial chat

__meta

64 var status-log  ( we want to use "3f and" to wrap)
2 var up  ( user pointer)
2 var exc-pc  ( captured pc and sp for catch and throw)
2 var exc-sp

( Allocate the two stacks. By making the stack + user area exactly 64
  bytes, we can xor the user pointer with 64 to switch tasks!

  The first word of the user area is the saved sp; the second - only used
  by the serial chat code - is the app-running? flag.)

@ram #ram +
  2 cells - dup constant serial-user-area
 32 cells -     constant i2c-user-area

( World's shortest multi-tasker!)
label yield
   z pushw  y pushw  0 pushw
   up y ldw  ( get current user pointer)
   sp@  0 ,y xl st  1 ,y xh st  ( save sp)
   ( switch tasks - by xoring a bit in y!)  64 xl ldi  xl yl eor
   ( fall thru)

label restore
   up y stw  ( set user pointer)
   0 ,y xl ld  1 ,y xh ld  sp!  ( restore sp)
   0 popw  y popw  z popw  ret  ;c

label catch
   x popw  x pushw  exc-pc x stw
   sp@  2 x adiw ( skip ra)  exc-sp x stw  ret  ;c

label throw
   exc-sp x ldw  sp!
   exc-pc x ldw  x pushw  ret  ;c

( Log the status byte from TWSR, passed in xl.)
label log-twsr   y+ xl st  63 yl andi ( wrap)  ret  ;c

( Load core I2C chat code.)
ld target/AVR/test/chat-iic-core.mu4

( Load chat entry, dispatch, and init.)
ld target/AVR/test/chat-loop.mu4
