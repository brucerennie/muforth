( This file is part of muforth: https://muforth.dev/

  Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading AVR register context trampoline

__meta
hex

label register-return  ( to chat)
   SREG h0 in  ( get SREG)  h0 dpushw  ( pushes h1 too: could be useful)
   z dpushw  x dpushw  w dpushw  ret  ;c

label register-trampoline  ( pc h1:sreg z x w - h1':sreg' z' x' w')
   ( push continuation, big endian!)
   register-return \m >ra h0 ldiw  h0 pushw

   w dpopw  x dpopw  z dpopw  ( pop register context)
   h0 dpopw  ( pop stacked SREG into h0, padding into h1)
   SREG h2 in  80 h2 andi  ( get *current* I bit)
   7f h0 andi  h2 h0 or  ( combine them)
   SREG h0 out  ( set SREG)
   ( pop PC that host has prepared: divided by 2 and swapped bytes)
   g0 dpopw
   g0 pushw  ( push onto machine's return stack; this is the code to call)
   ret ( pop pushed PC and execute! it will return to register-return)  ;c

__host

( Cached local values of target registers.)
variable .H1
variable .W
variable .X
variable .Z
variable .SREG    ( status register)

( Handy shorthands to access the register variables.)
: h1!  .H1 ! ;  : h1@  .H1 @ ;

: w@  .W @ ;  : w!  .W ! ;
: x@  .X @ ;  : x!  .X ! ;
: z@  .Z @ ;  : z!  .Z ! ;

: .b8   binary  <#  4#  char _ hold  4#  #> type ;
: .sr   .SREG @  .b8  2sp ;

-- 005f reg  SREG     | I       T       H       S       V       N       Z       C
-: radix preserve
   cr  ." ITHS_VNZC  H1     W     X     Z    SP    PC"
       (  0000_1111  3a  0123  4567  89ab  0123  4567 )
   cr           .sr
          .H1 @ .h8 2sp
                        .W .r .X .r .Z .r
                                         .SP .r
                                               .PC .r ;
: explore-regs  [ #] is .regs ;  explore-regs

: rx  ( addr)  ( execute target non-forth word)
   ?chat
   \m >ra  .SREG @ h1@ lohi>  z@  x@  w@
   stack>  \l register-trampoline runwait  stack<
   w!  x!  z!  >hilo .SREG ! h1!  .regs ;
