( This file is part of muforth: https://muforth.dev/

  Copyright 2012-2023 David Frech. (Read the LICENSE for details.)

( Load file for serial chat example. Shows how to use regions, signatures,
  and vectors.)

-d mega324

ld! target/AVR/build.mu4

 "ff_d0_e2  fuses !  ( SPIEN, EESAVE, bootsz 00, reset to bootloader; SUT 10, 8M RC clk)
%1110_1111  locks !  ( protect bootloader; leave lock bits unprogrammed)

flash
( Signature shold be the first thing in the flash.)
," UART chat test, tasking, with heartbeat LED, watchdog, and two debounced buttons."
build-info

( Tasks and user areas.)
@ram #ram +  2 cells - ( user)  dup equ chat-user-area     #32 cells - ( stack)
             2 cells - ( user)  dup equ heart-user-area      8 cells -
             2 cells - ( user)  dup equ button0-user-area    8 cells -
             2 cells - ( user)  dup equ button1-user-area    8 cells -
drop

boot
1 vectors allot  ( room for reset vector)
ld target/AVR/simple-tasker.mu4  ( this *must* directly follow reset vector!)
ld target/AVR/chat-serial.mu4

flash
( Our application is the timer interrupt, heartbeat task, and button tasks.)
ld target/AVR/heart.mu4
ld target/AVR/buttons.mu4

RESET handler
label create-app-tasks
   ( We enter with h2 pointing to chat task.)
   button1-user-area y ldiw
   button1-task 2/ h0 ldiw ( pc)
   create-task-hook call

   button0-user-area y ldiw
   button0-task 2/ h0 ldiw ( pc)
   create-task-hook call

   heart-user-area y ldiw
   heart-task 2/ h0 ldiw ( pc)
   create-task-hook jmp  ( return with h2 pointing to heart)  ;c
