( This file is part of muforth: https://muforth.dev/

  Copyright 2002-2024 David Frech. (Read the LICENSE for details.)

loading Core flash programming

( This is currently used by the ARM/v6-m, ARM/v7-m, and RISC-V targets.)

hex

: program-chunk  ( 'target len)
   cr ."    program "  over u.  dup u.
   over image+ -rot  ( buf 'target len)  t.program ;

.ifdef /page  ( for devices with uniform page size)

: erase-page  ( 'target)
   cr ."    erase   "  dup u.
   t.erase ;

: erase?  ( 'target - erase?)   [ /page 1- #] and  0= ;

( Before we program the _first_ byte of a page, we erase the page.)
: flash-chunk  ( 'target len - 'target+len)
   2dup + push  over erase? if  over erase-page  then  program-chunk  pop ;

.else  ( non-uniform flash; uses sectors rather than pages)

: erase-sector  ( sector#)
   cr ."    erase sector "  dup u.
   t.erase ;

( Given a flash address, return true if on a sector boundary; also return
  sector# to erase; else return false.)

: erase?  ( 'target - sector# -1 | 0)
   lookup-flash-sector ;

( Before we program the _first_ byte of a sector we erase the sector.)
: flash-chunk  ( 'target len - 'target+len)
   2dup + push  over erase? if  erase-sector  then  program-chunk  pop ;

.then

( Do the programming in chunks; the variable /chunk - which is set by the
  interact code based on a value received from the debug interface - tells
  us how big each chunk should be.)

: flash-region  ( a len)
   /chunk @  /mod  ( r q)  swap push  for  /chunk @  flash-chunk  next
                                    pop  =if  ( rem) flash-chunk  drop ^  then  2drop ;

: ?align-region  ( a u - a u)
   dup  flash-alignment 1-  and  0= if ^ then
   flash-alignment 1- +  flash-alignment negate and  ( align)
   cr warn" The flash region does not end on a target cell boundary." ;

: flash-image
   h preserve  flash region ( a u)  ?align-region  ?flash-check
   t.flash-begin  2dup flash-region  flash-special  t.flash-end ;


( Verifying that host and target images are the same.)

( Prepare to do a comparison or computation between data read from the
  target into a buffer, and data in our memory image. Read a chunk from the
  target into buf, and set m to point to the beginning of buf.

  Be careful about setting m. Some chunked read implementations use it, so
  set it *after* doing the read.)

: setup-comparison  ( a u)   pad -rot t.read  pad m ! ;

variable noisy-verify?  ( Whether to print differences.)

( Verify a single "item" - byte, halfword, word - and return the bitwise or
  of the byte-by-byte differences. We use flash-alignment as the number of
  bytes to compare.)

: verify-item  ( a - diff)
   dup skip-verify? if  flash-alignment m +!  drop 0 ^  then
   image+  flash-alignment  over + swap  0 -rot  ( 0 end start)
   do  i c@  m* xor  or  loop ;

: ?verify-show  ( a diff)
   if  noisy-verify? @ if  dup u. ( print address that differs)  then  then
   drop ;

: verify-chunk  ( diff a u - diff' a+u)
   -- cr ." verify "  over u.  dup u.
   2dup + push  2dup setup-comparison  over + swap
   do  i verify-item  ( diff diff2)  i over ?verify-show
       or ( diff')  flash-alignment +loop
   pop ;

( Verify using the same chunk size that we used for flashing; the variable
  /chunk - which is set by the interact code based on a value received from
  the debug interface - tells us how big each chunk should be.)

: verify-region  ( a u - diff)
   0 -rot  ( diff)
   /chunk @  /mod  ( r q)  swap push  for  /chunk @  verify-chunk  next
                                    pop  =if  ( rem) verify-chunk  drop ^  then  2drop ;

: ?empty-region  ( a u - a u)  =if ^ then  ( exit if non-empty)
   noisy-verify? @ if
      cr warn" The flash region is empty. verify will always report no change."
   then ;

: do-verify  ( noisy? - diff)
   noisy-verify? !
   h preserve  flash region ( a u)  ?empty-region  ?align-region  ?verify-check
   2dup verify-region -rot  verify-special  or ;

: verify-noisily  ( - diff)
   radix preserve hex  ( print mis-matched addresses in hex)
   -1 do-verify ;

: verify  verify-noisily drop ;

( Called when we connect to the target to make sure that the host's and
  target's flash regions are the same.)

-: ( verify-quietly)  ( - 0 if same, non-zero if different)
   0 do-verify ;  is verify-quietly


( The image reading and writing code expects a von Neumann memory model - a
  single address space. Let's only load this code if the ram and flash
  regions belong to the same aspace.)

( Since not all targets are using the generic memory code that defines
  'aspace, let's make sure to treat that case as well!)

.ifdef 'aspace

: von-neumann?
   h preserve  ram 'aspace  flash 'aspace = ;

.else

( Not using the aspace code, so by definition the target is von Neumann!)
-1 constant von-neumann?

.then

von-neumann? .if

( Read an image from the target into the host image.)
: read-chunk  ( a u - a+u)
   -- cr ." read-chunk "  over u.  dup u.
   2dup + push
   over image+ -rot  t.read
   pop ;

: read-region  ( a u)
   /chunk @  /mod  ( r q)  swap push  for  /chunk @  read-chunk  next
                                    pop  =if  ( rem) read-chunk  drop ^  then  2drop ;

( If last 16 bytes contain "muforth@" followed by a starting target
  address, use that address rather than @flash.)

: image-origin  ( a u - a u start)
   2dup +  cell- cell-  @+ @ swap
   [ token muforth@ drop @ #] = if
      ( valid signature) [ -2 cells #] u+ ^ then
   drop  @flash ( default to @flash) ;

( Read image from target. Leaves user in ram or flash depending on target
  address.)

: read-image  ( target len)
   2dup read-region  over choose-image  over +  ( start end)  region! ;

( Load image from a file. Leaves user in ram or flash depending on image
  start address. If image does not contain a start address, leaves user in
  flash.)

: load-image
   token, open-file-ro  ( fd)  dup read-file  ( a u)  rot close-file
   image-origin  dup choose-image
   2dup swap over +  ( start end)  region!
   ( a u start) image+ swap  cmove ;

( Save image to a file. Saves the current region. To make sure you are
  saving the flash region, do "flash save-image <name>".)

: save-image
   token, create-file  ( fd)  push
   r@  region  swap image+ swap  write
   r@ " muforth@" write  r@ dp cell+ ( 'origin) cell write ( start)
   pop close-file ;

.then  ( von-neumann)
